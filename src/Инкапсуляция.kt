/*
Инкапсуляция свойство программировая позволяющее пользователю не задумываться о сложности
реализации используемого программного компонента (что у него внутри?), а взаимодействовать
с ним посредством предоставляемого интерфейска(публичных методов и членов), а также объядинить и защитить
жизненно важные для компонента данные. При этом пользователю предосталяется только спецификация (интерфейс) объекта.

Пользователь может взаимодействовать с объектом только через этот интерфейс. Реализуется с помощью ключевого
слова public.

Пользователь не может использовать закрытые данные и методы
Реализуется с помощью ключевых слов private, protected, interned.
 */
// Модификаторы доступа


// private, protected, public, internal
private fun SomeFun(){} // Будет функция видна только внутри файла где объявлена
//internal будет видна во всех

open class PrivateAndProtected(){
    private val privateVal = 30
    protected val protected = 40
    //Мы видим переменную приват только внутри класса
    private fun PrivateFun(){
        println(privateVal)
    }
}

class Protected:PrivateAndProtected(){
    fun SomeFun(){
        println(protected)//protected наследуется только на дочерные классы
    }

}
//Инкапсуляция
class Person{
    private  var _age: Int = 19
    var age: Int
        set(value) {
            // set определяет логику установку значения переменной блок сет пишется сразу к свойству к которому относится
            _age = if (value>0 && value<120){
            value
            }
            else {
                0
            }
        }
        get() = _age
    //get() управляет получением свойств определяет логику получения свойств значения
}


fun main(){
    SomeFun()
    var person:Person = Person()
    person.age = 35
    println(person.age)
    
}
