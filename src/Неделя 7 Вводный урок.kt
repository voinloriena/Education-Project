fun main(){
println(showImage())
}

open class Empty{}

open class Images{
    constructor(path:String){
        println("Adress this photography $path")
    }
    open val dpi:Int = 0
}

class ImageProvider:Images{
    constructor(path: String):super(path)//Если нету родительского класса используется супер если используем доп конструктор

    override val dpi:Int //Через метод get можно перезаписывать значения.
    get() = super.dpi//Вот тут get() = 1000
}
    fun provideImageInfo(){
        showImage()
    }

fun showImage(){
    println("Show Image")
}
//Переопределние свойств класса работает также как и переопределение методов
//

/*
Наследование один из четырех важнейших механизмов ООП(наряду с инкапсуляцией, полиморфизмом, и абстракцией),
позволяющий описать новый класс на основе уже существующего(родительского), при этом свойства и функциональность
родительского класса заимствуются новым классом.

Другими словами, класс-наследник реализует спецификацию уже существующего класса(базовый класс). Это позволяет
обращаться с объектами класса-наследника точно так же, как с объектами базового класса.
 */