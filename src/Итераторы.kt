fun main(){
    val numbers = listOf(1,2,3,4,5,6)
    val numbers2 = mutableListOf(1,2,3,4,5,6)// Изменяемые итераторы
    val numberIterator2 = numbers2.iterator()// Изменяемые итераторы
    val numbersIterator = numbers.iterator()
    val listIteratorNumbers = numbers.listIterator()

    while (numberIterator2.hasNext()){// Изменяемые итераторы
        println(numberIterator2.next())// Изменяемые итераторы
        numberIterator2.remove()// Изменяемые итераторы
    }
    println(numbers2)// Изменяемые итераторы

    while(listIteratorNumbers.hasNext())//hasPrevious позволяет перейти к следующему значении в итераторе
        listIteratorNumbers.nextIndex()
        println(listIteratorNumbers.next())

    while (listIteratorNumbers.hasPrevious()){
        println(listIteratorNumbers.previous())//Идти по итераторам наобарот от 6 до 1
        //previous() функция позволяет это сделать
    }

    for(item in numbers) {
        println(item)
    }
    while(numbersIterator.hasNext()){//hasNext() функция означает есть ли у итератора
        //следующее значение
        println(numbersIterator.next())//Если есть значение в итераторе можем распечатать
        //Вызов функции next возвращает итератор на следующий элемент
        //Через цикл for не явно получаешь итератор

    }
}
/*
Для обхода элементов коллекции стандартная библиотека Котлин поддерживает механизм
итераторов-объектов, которые предоставляют доступ к элементам последовательно, не
раскрывая базовую структуру коллекции. Итераторы полезны, когда вам нужно обработать
все элементы коллекции один за другим, например, вывести в лог их значения или обновить

Итераторы доступны всем наследникам интерфейка iterable<T>, включая Set  и List,
путем вызова функции iterator()

При получении итератора он скачала указывает на первый элемент коллекции
вызов функции next() возвращает этот элемент и перемещает позицию итератора на
следующий элемент, если такой существует

Как только итератор проходит через последний элемент его больше нельзя использовать
для извлячения элементов его также нельзя вернуть в превыдущее положение
Чтобы снова перебрать коллекцию нужно создать новый итератор
 */